simple_example ="<examples>\n<example>\n<LUA_CODE>\n\ncounter = 0\n\n\nfunction sendReply(msg, data)\n    msg.reply({Data = data, Action = msg.Action .. \"Response\"})\nend\n\n\nfunction incrementCounter(msg)\n    counter = counter + 1\n    sendReply(msg, counter)\nend\n\nfunction decrementCounter(msg)\n    counter = counter - 1\n    sendReply(msg, counter)\nend\n\nfunction getCounter(msg)\n    sendReply(msg, counter)\nend\n\n\nHandlers.add(\"incrementCounter\", incrementCounter)\nHandlers.add(\"decrementCounter\", decrementCounter)\nHandlers.add(\"getCounter\", getCounter)\n</LUA_CODE>\n<EXISTING_TESTS>\nimport aos from \"./aos\";\nimport fs from \"fs\";\nimport path from \"node:path\";\nimport assert from \"node:assert\";\nimport { describe, test, before } from \"node:test\";\n\ndescribe(\"Counter Tests\", () => {\n  let env: aos;\n\n  before(async () => {\n    const source = fs.readFileSync(\n      path.join(__dirname, \"../../process/build/output.lua\"),\n      \"utf-8\"\n    );\n    env = new aos(source);\n    await env.init();\n  });\n\n  test(\"should initialize counter at 0\", async () => {\n    const response = await env.send({ Action: \"getCounter\" });\n    assert.equal(response.Messages[0].Data, 0);\n  });\n\n  test(\"should increment counter\", async () => {\n    const response = await env.send({ Action: \"incrementCounter\" });\n    assert.equal(response.Messages[0].Data, 1);\n  });\n\n\n});\n</EXISTING_TESTS>\n<ideal_output>\nimport aos from \"./aos\";\nimport fs from \"fs\";\nimport path from \"node:path\";\nimport assert from \"node:assert\";\nimport { describe, test, before } from \"node:test\";\n\ndescribe(\"Counter Tests\", () => {\n  let env: aos;\n\n  before(async () => {\n    const source = fs.readFileSync(\n      path.join(__dirname, \"../../process/build/output.lua\"),\n      \"utf-8\"\n    );\n    env = new aos(source);\n    await env.init();\n  });\n\n  test(\"should initialize counter at 0\", async () => {\n    const response = await env.send({ Action: \"getCounter\" });\n    assert.equal(response.Messages[0].Data, 0);\n  });\n\n  test(\"should increment counter\", async () => {\n    const response = await env.send({ Action: \"incrementCounter\" });\n    assert.equal(response.Messages[0].Data, 1);\n  });\n\n  test(\"should decrement counter\", async () => {\n    const response = await env.send({ Action: \"decrementCounter\" });\n    assert.equal(response.Messages[0].Data, 0);\n  });\n\n  test(\"should handle multiple increments\", async () => {\n    await env.send({ Action: \"incrementCounter\" });\n    await env.send({ Action: \"incrementCounter\" });\n    const response = await env.send({ Action: \"getCounter\" });\n    assert.equal(response.Messages[0].Data, 2);\n  });\n\n  test(\"should handle multiple decrements\", async () => {\n    await env.send({ Action: \"decrementCounter\" });\n    await env.send({ Action: \"decrementCounter\" });\n    const response = await env.send({ Action: \"getCounter\" });\n    assert.equal(response.Messages[0].Data, 0);\n  });\n\n  test(\"should allow negative numbers\", async () => {\n    await env.send({ Action: \"decrementCounter\" });\n    const response = await env.send({ Action: \"getCounter\" });\n    assert.equal(response.Messages[0].Data, -1);\n  });\n});\n\n</ideal_output>\n</example>\n<example>\n<LUA_CODE>\nlocal json = require(\"json\")\n\n-- Task list storage\nlocal tasks = {}\n\n-- Task status constants\nlocal STATUS = {\n    PENDING = \"[ ]\",\n    COMPLETED = \"[X]\"\n}\n\n\n\nfunction sendReply(msg, data)\n    msg.reply({Data = data, Action = msg.Action .. \"Response\"})\nend\n\nfunction findTaskById(id)\n    for _, task in ipairs(tasks) do\n        if task.id == id then\n            return task\n        end\n    end\n    return nil\nend\n\n\nfunction addTaskProcessor(msg)\n    local data = json.decode(msg.Data)\n    local task = {\n        id = #tasks + 1,\n        title = data.title,\n        description = data.description,\n        status = STATUS.PENDING,\n    }\n    table.insert(tasks, task)\n    sendReply(msg, task)\nend\n\nfunction updateTaskProcessor(msg)\n    local data = json.decode(msg.Data)\n    local task = findTaskById(data.id)\n    if not task then\n        error(\"Task not found\")\n    end\n    task.status = data.status\n    sendReply(msg, task)\nend\n\n\nfunction getTasksProcessor(msg)\n    sendReply(msg, tasks)\nend\n\n\n\n\nHandlers.add(\"addTask\", addTaskProcessor)\nHandlers.add(\"updateTask\", updateTaskProcessor)\nHandlers.add(\"getTasks\", getTasksProcessor)\n</LUA_CODE>\n<EXISTING_TESTS>\nimport aos from \"./aos\";\nimport fs from \"fs\";\nimport path from \"node:path\";\nimport assert from \"node:assert\";\nimport { describe, test, before } from \"node:test\";\n\ndescribe(\"Counter Tests\", () => {\n  let env: aos;\n\n  before(async () => {\n    const source = fs.readFileSync(\n      path.join(__dirname, \"../../process/build/output.lua\"),\n      \"utf-8\"\n    );\n    env = new aos(source);\n    await env.init();\n  });\n\n  test(\"addTask\", async () => {\n    await env.send({\n      Action: \"addTask\",\n      Data: JSON.stringify({\n        title: \"Test Task\",\n        description: \"Test Description\",\n      }),\n    });\n    const response = await env.send({ Action: \"getTasks\" });\n    console.log(response.Messages[0].Data);\n  });\n\n});\n\n</EXISTING_TESTS>\n<ideal_output>\n  test(\"updateTask\", async () => {\n    await env.send({\n      Action: \"updateTask\",\n      Data: JSON.stringify({ id: 1, status: \"[X]\" }),\n    });\n    const response = await env.send({ Action: \"getTasks\" });\n    console.log(response.Messages[0].Data);\n  });\n\n  test(\"getTasks\", async () => {\n    const response = await env.send({ Action: \"getTasks\" });\n    console.log(response.Messages[0].Data);\n  });\n</ideal_output>\n</example>\n</examples>\n\n"
sqlite_example = "<examples>\n<example>\n<LUA_CODE>\nlocal sqlite3 = require(\"lsqlite3\")\nlocal json = require(\"json\")\nDB = DB or sqlite3.open_memory()\nDbAdmin = require('DbAdmin').new(DB)\n\n-- Table definitions\nAUTHORS = [[\n    CREATE TABLE IF NOT EXISTS Authors (\n        id TEXT PRIMARY KEY,\n        name TEXT NOT NULL,\n        email TEXT NOT NULL UNIQUE\n    );\n]]\n\nPOSTS = [[\n    CREATE TABLE IF NOT EXISTS Posts (\n        id TEXT PRIMARY KEY,\n        author_id TEXT NOT NULL,\n        title TEXT NOT NULL,\n        content TEXT NOT NULL,\n        published_at INTEGER DEFAULT (strftime('%s', 'now')),\n        FOREIGN KEY (author_id) REFERENCES Authors(id)\n    );\n]]\n\nfunction Configure()\n    DbAdmin:exec(AUTHORS)\n    DbAdmin:exec(POSTS)\n    Configured = true\nend\n\nif not Configured then Configure() end\n\n\nfunction sendReply(msg, data)\n    msg.reply({Data = data, Action = msg.Action .. \"Response\"})\nend\n\nfunction addAuthor(data)\n    DbAdmin:apply(\n        'INSERT INTO Authors (id, name, email) VALUES (?, ?, ?)',\n        {\n            data.id,\n            data.name,\n            data.email\n        }\n    )\nend\n\nfunction addPost(data)\n    DbAdmin:apply(\n        'INSERT INTO Posts (id, author_id, title, content) VALUES (?, ?, ?, ?)',\n        {\n            data.id,\n            data.author_id,\n            data.title,\n            data.content\n        }\n    )\nend\n\nfunction getPosts()\n    local results = DbAdmin:exec([[\n        SELECT Posts.*, Authors.name as author_name \n        FROM Posts \n        JOIN Authors ON Posts.author_id = Authors.id\n        ORDER BY published_at DESC;\n    ]])\n    return json.encode(results)\nend\n\nfunction updatePost(data)\n    DbAdmin:apply(\n        'UPDATE Posts SET title = ?, content = ? WHERE id = ?',\n        {\n            data.title,\n            data.content,\n            data.id\n        }\n    )\nend\n\nfunction deletePost(id)\n    DbAdmin:apply('DELETE FROM Posts WHERE id = ?', {id})\nend\n\n\n\n\n\n-- Processor functions for Authors\nfunction addAuthorProcessor(msg)\n    local data = json.decode(msg.Data)\n    addAuthor(data)\n    sendReply(msg, data)\nend\n\n-- Processor functions for Posts\nfunction addPostProcessor(msg)\n    local data = json.decode(msg.Data)\n    addPost(data)\n    sendReply(msg, data)\nend\n\nfunction getPostsProcessor(msg)\n    local data = getPosts()\n    print(data)\n    sendReply(msg, data)\nend\n\nfunction updatePostProcessor(msg)\n    local data = json.decode(msg.Data)\n    updatePost(data)\n    sendReply(msg, data)\nend\n\nfunction deletePostProcessor(msg)\n    local data = json.decode(msg.Data)\n    deletePost(data.id)\n    sendReply(msg, {success = true})\nend\n\n-- Register handlers\nHandlers.add(\"AddAuthor\", addAuthorProcessor)\nHandlers.add(\"AddPost\", addPostProcessor)\nHandlers.add(\"GetPosts\", getPostsProcessor)\nHandlers.add(\"UpdatePost\", updatePostProcessor)\nHandlers.add(\"DeletePost\", deletePostProcessor)\n</LUA_CODE>\n<EXISTING_TESTS>\nimport aos from \"./aos\";\nimport fs from \"fs\";\nimport path from \"node:path\";\nimport assert from \"node:assert\";\nimport { describe, test, before, todo } from \"node:test\";\n\ndescribe(\"Tests\", () => {\n  let env: aos;\n\n  before(async () => {\n    const source = fs.readFileSync(\n      path.join(__dirname, \"../../process/build/output.lua\"),\n      \"utf-8\"\n    );\n    env = new aos(source);\n    await env.init();\n  });\n\n  test(\"load DbAdmin module\", async () => {\n    const dbAdminCode = fs.readFileSync(\n      path.join(__dirname, \"../../process/build/dbAdmin.lua\"),\n      \"utf-8\"\n    );\n    const result = await env.send({\n      Action: \"Eval\",\n      Data: `\n  local function _load() \n    ${dbAdminCode}\n  end\n  _G.package.loaded[\"DbAdmin\"] = _load()\n  return \"ok\"\n      `,\n    });\n    console.log(\"result DbAdmin Module\", result);\n    assert.equal(result.Output.data, \"ok\");\n  });\n\n  test(\"load source\", async () => {\n    const code = fs.readFileSync(\n      path.join(__dirname, \"../../process/build/output.lua\"),\n      \"utf-8\"\n    );\n    const result = await env.send({ Action: \"Eval\", Data: code });\n    console.log(\"result load source\", result);\n    // assert.equal(result.Output.data, \"OK\");\n  });\n\n  test(\"should add Author\", async () => {\n    const author = {\n      id: \"1\",\n      name: \"Test Author\",\n      email: \"test@author.com\",\n    };\n\n    const response = await env.send({\n      Action: \"AddAuthor\",\n      Data: JSON.stringify(author),\n    });\n\n    console.log(\"add author\", response.Messages);\n  });\n\n  test(\"should add post\", async () => {\n    const post = {\n      id: \"1\",\n      title: \"Test Post\",\n      content: \"Test Content\",\n      author_id: \"1\",\n    };\n    const response = await env.send({\n      Action: \"AddPost\",\n      Data: JSON.stringify(post),\n    });\n    console.log(\"add post\", response.Messages);\n  });\n\n  test(\"should get posts\", async () => {\n    const response = await env.send({ Action: \"GetPosts\" });\n    console.log(\"get posts\", response.Messages);\n  });\n});\n\n</EXISTING_TESTS>\n<ideal_output>\n  test(\"should update post\", async () => {\n    const updatedPost = {\n      id: \"1\",\n      title: \"Updated Test Post\",\n      content: \"Updated Test Content\",\n    };\n\n    const response = await env.send({\n      Action: \"UpdatePost\",\n      Data: JSON.stringify(updatedPost),\n    });\n\n    console.log(\"update post\", response.Messages);\n  });\n  test(\"should get posts after update\", async () => {\n    const response = await env.send({ Action: \"GetPosts\" });\n    console.log(\"get posts after update\", response.Messages);\n  });\n  test(\"should delete post\", async () => {\n    const deletePost = {\n      id: \"1\",\n    };\n    const response = await env.send({\n      Action: \"DeletePost\",\n      Data: JSON.stringify(deletePost),\n    });\n\n    console.log(\"delete post\", response.Messages);\n  });\n  test(\"should get posts after deletion\", async () => {\n    const response = await env.send({ Action: \"GetPosts\" });\n    console.log(\"get posts after deletion\", response.Messages);\n  });\n</ideal_output>\n</example>\n</examples>\n\n"
